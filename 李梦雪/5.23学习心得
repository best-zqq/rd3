Vim模式：
（1）普通模式，Vim启动后的默认模式，移动光标，删除文本等通过按a键或者i键可以进入插入模式，按：进入命令行模式
（2）插入模式，向文本缓冲中插入文本，ESC退回到普通模式
（3）可视模式，与普通模式相似，但移动命令会扩大高亮的文本区域
（4）选择模式，可以用鼠标或者光标键高亮选择文本，不过输入任何字符的话，vim会用这个字符替换选择的高亮文本块，并自动进入插入模式
（5）命令行模式，可以输入会被解释成并执行的文本，命令执行之后，返回到命令行模式之前的模式，输入wq回车后保存并退出vim
（6）Ex模式，与命令行模式比较相似，在使用:visual命令离开Ex模式前，可以一次执行多条命令
关于vim的光标移动，对于修改代码时特别方便，可以跳转到任意行同时修改后还可以Ctrl+o快速回到修改前的位置，使用方便。
复制是y，粘贴是p（小写是粘贴至光标后，大写是光标前），删除d后也可以用p粘贴，即是剪切
缩进操作和查找操作只在普通模式下有效。
vim可以同时对多个文件进行编辑，在普通模式下可以用：b+文件名进行相互切换，还可以随时新建。
shell中的变量也有不同的数据类型，但是不用专门指定类型名，可以参与运算，有作用域限定。读取变量时要在变量名前加$
三种环境变量（在当前进程的紫金城有效）以及相关的命令：
set：显示当前shell所有变量
env：显示与当前用户有关的环境变量
export：显示从shell中导出成环境变量的变量

不同的排序算法和搜索算法的代码实现

疑问：
对于快排的算法，有一个地方有一些疑问
public class QuickSort {
    public static void sort(int[] arr, int head, int tail) {
        if (head >= tail || arr == null || arr.length <= 1) {
            return;
        }
        int i = head, j = tail, pivot = arr[(head + tail) / 2];
        while (i <= j) {
            while (arr[i] < pivot) {
                ++i;
            }
            while (arr[j] > pivot) {
                --j;
            }
            if (i < j) {  //？这个地方本来就是在while循环里，这个判断条件是什么意思？不是应该判断选定值与前后指针位置值的大小然后进行位置交换？
                int t = arr[i];
                arr[i] = arr[j];
                arr[j] = t;
                ++i;
                --j;
            } else if (i == j) {
                ++i;
            }
        }
        sort(arr, head, j);
        sort(arr, i, tail);
    }
